{"version":3,"file":"index.js","sources":["index.js"],"sourcesContent":["import net from 'node:net';\nimport os from 'node:os';\n\nclass Locked extends Error {\n\tconstructor(port) {\n\t\tsuper(`${port} is locked`);\n\t}\n}\n\nconst lockedPorts = {\n\told: new Set(),\n\tyoung: new Set(),\n};\n\n// On this interval, the old locked ports are discarded,\n// the young locked ports are moved to old locked ports,\n// and a new young set for locked ports are created.\nconst releaseOldLockedPortsIntervalMs = 1000 * 15;\n\nconst minPort = 1024;\nconst maxPort = 65_535;\n\n// Lazily create timeout on first use\nlet timeout;\n\nconst getLocalHosts = () => {\n\tconst interfaces = os.networkInterfaces();\n\n\t// Add undefined value for createServer function to use default host,\n\t// and default IPv4 host in case createServer defaults to IPv6.\n\tconst results = new Set([undefined, '0.0.0.0']);\n\n\tfor (const _interface of Object.values(interfaces)) {\n\t\tfor (const config of _interface) {\n\t\t\tresults.add(config.address);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nconst checkAvailablePort = options =>\n\tnew Promise((resolve, reject) => {\n\t\tconst server = net.createServer();\n\t\tserver.unref();\n\t\tserver.on('error', reject);\n\n\t\tserver.listen(options, () => {\n\t\t\tconst {port} = server.address();\n\t\t\tserver.close(() => {\n\t\t\t\tresolve(port);\n\t\t\t});\n\t\t});\n\t});\n\nconst getAvailablePort = async (options, hosts) => {\n\tif (options.host || options.port === 0) {\n\t\treturn checkAvailablePort(options);\n\t}\n\n\tfor (const host of hosts) {\n\t\ttry {\n\t\t\tawait checkAvailablePort({port: options.port, host}); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tif (!['EADDRNOTAVAIL', 'EINVAL'].includes(error.code)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn options.port;\n};\n\nconst portCheckSequence = function * (ports) {\n\tif (ports) {\n\t\tyield * ports;\n\t}\n\n\tyield 0; // Fall back to 0 if anything else failed\n};\n\nexport default async function getPorts(options) {\n\tlet ports;\n\tlet exclude = new Set();\n\n\tif (options) {\n\t\tif (options.port) {\n\t\t\tports = typeof options.port === 'number' ? [options.port] : options.port;\n\t\t}\n\n\t\tif (options.exclude) {\n\t\t\tconst excludeIterable = options.exclude;\n\n\t\t\tif (typeof excludeIterable[Symbol.iterator] !== 'function') {\n\t\t\t\tthrow new TypeError('The `exclude` option must be an iterable.');\n\t\t\t}\n\n\t\t\tfor (const element of excludeIterable) {\n\t\t\t\tif (typeof element !== 'number') {\n\t\t\t\t\tthrow new TypeError('Each item in the `exclude` option must be a number corresponding to the port you want excluded.');\n\t\t\t\t}\n\n\t\t\t\tif (!Number.isSafeInteger(element)) {\n\t\t\t\t\tthrow new TypeError(`Number ${element} in the exclude option is not a safe integer and can't be used`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\texclude = new Set(excludeIterable);\n\t\t}\n\t}\n\n\tif (timeout === undefined) {\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = undefined;\n\n\t\t\tlockedPorts.old = lockedPorts.young;\n\t\t\tlockedPorts.young = new Set();\n\t\t}, releaseOldLockedPortsIntervalMs);\n\n\t\t// Does not exist in some environments (Electron, Jest jsdom env, browser, etc).\n\t\tif (timeout.unref) {\n\t\t\ttimeout.unref();\n\t\t}\n\t}\n\n\tconst hosts = getLocalHosts();\n\n\tfor (const port of portCheckSequence(ports)) {\n\t\ttry {\n\t\t\tif (exclude.has(port)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet availablePort = await getAvailablePort({...options, port}, hosts); // eslint-disable-line no-await-in-loop\n\t\t\twhile (lockedPorts.old.has(availablePort) || lockedPorts.young.has(availablePort)) {\n\t\t\t\tif (port !== 0) {\n\t\t\t\t\tthrow new Locked(port);\n\t\t\t\t}\n\n\t\t\t\tavailablePort = await getAvailablePort({...options, port}, hosts); // eslint-disable-line no-await-in-loop\n\t\t\t}\n\n\t\t\tlockedPorts.young.add(availablePort);\n\n\t\t\treturn availablePort;\n\t\t} catch (error) {\n\t\t\tif (!['EADDRINUSE', 'EACCES'].includes(error.code) && !(error instanceof Locked)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow new Error('No available ports found');\n}\n\nexport function portNumbers(from, to) {\n\tif (!Number.isInteger(from) || !Number.isInteger(to)) {\n\t\tthrow new TypeError('`from` and `to` must be integer numbers');\n\t}\n\n\tif (from < minPort || from > maxPort) {\n\t\tthrow new RangeError(`'from' must be between ${minPort} and ${maxPort}`);\n\t}\n\n\tif (to < minPort || to > maxPort) {\n\t\tthrow new RangeError(`'to' must be between ${minPort} and ${maxPort}`);\n\t}\n\n\tif (from > to) {\n\t\tthrow new RangeError('`to` must be greater than or equal to `from`');\n\t}\n\n\tconst generator = function * (from, to) {\n\t\tfor (let port = from; port <= to; port++) {\n\t\t\tyield port;\n\t\t}\n\t};\n\n\treturn generator(from, to);\n}\n"],"names":["Locked","Error","constructor","port","super","lockedPorts","old","Set","young","timeout","checkAvailablePort","options","Promise","resolve","reject","server","net","createServer","unref","on","listen","address","close","getAvailablePort","async","hosts","host","error","includes","code","getPorts","ports","exclude","excludeIterable","Symbol","iterator","TypeError","element","Number","isSafeInteger","undefined","setTimeout","getLocalHosts","interfaces","os","networkInterfaces","results","_interface","Object","values","config","add","portCheckSequence","has","availablePort","_extends","portNumbers","from","to","isInteger","RangeError","generator"],"mappings":"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"}